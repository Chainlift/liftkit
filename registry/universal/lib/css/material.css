/* 'Material' refers to the general sense of the word. Styles that mimic different physical properties like glass, paper, or rubber.*/

.glass {
  background-color: transparent;
  backdrop-filter: blur(10px) saturate(200%) brightness(40%);
  box-shadow: 0 0.128em 0.485em 0 rgba(0, 0, 0, 0.4);
  border: 1px solid var(--lk-outline);
}

/* Adding new modular definition for lk-material="glass" using nesting selectors */

[lk-material="glass"] {
  /* TODO: make sure that assigning position:relative here won't cause cascading problems. */
  /* It needs to be relative because its child scrim is positioned absolutely to it. */
  /* There shouldn't be any instances where you need glass but not a scrim, so this should be fine. */
  /* But if problems arise, define relative under a more spacific selector per-component*/
  /* for example, you'd modify [lk-card-material="glass"] in card.css instead and then do the same */
  /* wherever else it's necessary */

  position: relative;
  backdrop-filter: blur(calc(var(--lk-size-lg) * var(--lk-halfstep)));

  /* Modifies direct child text elements of the children slot (that way nested components like buttons
  don't inherit color blending props */

  [lk-slot="children"] {
    mix-blend-mode: multiply;
    color: var(--lk-onsurfacevariant);
    filter: contrast(1.35) brightness(1.1);
  }
}

[lk-component="lk-material-scrim"] {
  background-color: var(--lk-surfacecontainerlow);
  position: absolute;
  inset: 0;
  border-radius: inherit; /* Todo: see if this is a suitable replacement for defining border radius
    on parent and then applying overflow hidden to parent (probably, bc sidebars will use this) */
  z-index: -1;

  &[lk-material-scrim-thickness="thick"] {
    mix-blend-mode: screen;
    opacity: 0.75;
  }

  &[lk-material-scrim-thickness="default"] {
    mix-blend-mode: screen;
    opacity: 0.5;
  }

  &[lk-material-scrim-thickness="thin"] {
    mix-blend-mode: screen;
    opacity: 0.35;
  }
}

[lk-component="lk-material-scrim"] {
}

[lk-material-thickness="thick"] {
}
